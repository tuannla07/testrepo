parameters:
  - name: "PoolName"
    type: string
    default: "Azure Pipelines"
    values:
      - "Azure Pipelines"
      - "Omnia Agents"

  - name: MainVersion
    type: string

  - name: Tag
    type: string

  - name: ExtensionName
    type: string
    default: "N/A"

  - name: ExtensionId
    type: string

  - name: AutostartDefinitionId
    type: string
    default: ""

  - name: BuildDefinitionId
    type: string
    default: ""

  - name: VariableName
    type: string
  
  - name: BuildVersionNumber
    type: string

  - name: LibraryGroupId
    type: string

#------------------------------------------------------------------
# EnsureVersion -> Push_TestCloud_ProdIntent  -> Push_ProdCloud_ProdIntent  -> StartOtherClouds
#                                             -> Push_TestCloud_DevIntent
#                                             -> Push_ProdCloud_DevIntent
#               -> SetNextBuildVersion 
#------------------------------------------------------------------
stages:
  - stage: EnsureVersion
    dependsOn: []
    displayName: "Ensure Version"
    jobs:
      - job: EnsureVersionJob
        pool:
          name: ${{ parameters.PoolName }}
        steps:
          - checkout: OmniaPipelines

          - script: |
              set -euo pipefail
        
              missing_params=()
              if [ -z "${{ parameters.MainVersion }}" ]; then
                missing_params+=("MainVersion")
              fi
              if [ -z "${{ parameters.Tag }}" ]; then
                missing_params+=("Tag")
              fi
              if([ -z "${{ parameters.ExtensionId }}" ]); then
                missing_params+=("ExtensionId")
              fi
              if([ -z "${{ parameters.VariableName }}" ]); then
                missing_params+=("VariableName")
              fi
              if([ -z "${{ parameters.BuildVersionNumber }}" ]); then
                missing_params+=("BuildVersionNumber")
              fi
              if([ -z "${{ parameters.LibraryGroupId }}" ]); then
                missing_params+=("LibraryGroupId")
              fi
              if([ -z "${{ parameters.BuildDefinitionId }}" ]); then
                missing_params+=("BuildDefinitionId")
              fi

              if [ ${#missing_params[@]} -ne 0 ]; then
                echo "##vso[task.logissue type=error]Missing or empty parameters: ${missing_params[*]}"
                exit 1
              fi
            displayName: "Ensure variables"

          # outputs: BuildVersionNumberToUse (internal)
          - template: ../../templates/generic-get-build-version-number-to-use.yml
            parameters:
              BuildVersionNumber: ${{ parameters.BuildVersionNumber }}

          # outputs: ReleaseVersion (internal)
          - template: ../../templates/generic-ensure-version-as-variable.yml
            parameters:
              BuildVersionNumber: $(BuildVersionNumberToUse)
              Tag: ${{ parameters.Tag }}
              MainVersion: ${{ parameters.MainVersion }}

          - template: ../../templates/generic-set-build-version-number-on-build.yml
            parameters:
              ReleaseVersion: "$(ReleaseVersion)"

          - template: ../../templates/generic-get-last-succeded-build.yml
            parameters:
              BuildDefinitionId: "${{ parameters.BuildDefinitionId }}"

          # outputs: ReleaseVersion, UsedBuildVersion, ReferencedBuildId 
          - script: |
              echo "Setting version: $(ReleaseVersion)"
              echo "##vso[build.addbuildtag]$(ReleaseVersion)"
              echo "##vso[build.addbuildtag]bid_$(ReferencedBuildId)"
              echo "##vso[build.addbuildtag]build_$(ReferencedBuildNumber)"
              echo "##vso[task.setvariable variable=UsedBuildVersion;isOutput=true]$(BuildVersionNumberToUse)"
              echo "##vso[task.setvariable variable=ReleaseVersion;isOutput=true]$(ReleaseVersion)"
              echo "##vso[task.setvariable variable=ReferencedBuildId;isOutput=true]$(ReferencedBuildId)"
            name: EnsureVersionTask
            displayName: "Setting version variable and tag"

  # ------------------------------------------------------------------
  # STAGE: Push Omnia Extensions to TEST Cloud - Prod intent
  # ------------------------------------------------------------------
  - stage: Push_TestCloud_ProdIntent
    dependsOn: [EnsureVersion]
    displayName: "Push Test Cloud (Prod intent)"
    jobs:
      - job: Push_TestCloud_ProdIntentJob
        pool:
          name: ${{ parameters.PoolName }}
        variables:
          ReleaseVersion: $[ stageDependencies.EnsureVersion.EnsureVersionJob.outputs['EnsureVersionTask.ReleaseVersion'] ]
          ReferencedBuildId: $[ stageDependencies.EnsureVersion.EnsureVersionJob.outputs['EnsureVersionTask.ReferencedBuildId'] ]
        displayName: "Push Test Cloud (Prod intent)"
        steps:
          - checkout: OmniaPipelines

          - template: ../../templates/generic-rename-source-folders.yml

          # -----------------------------------------------------------------
          # init dotnet and npm, and omnia cli
          # Download and unzip drop
          # -----------------------------------------------------------------
          - template: ../../templates/generic-init-dotnet-omnia-npm.yml
            parameters:
              dotnetVersion: "9.0.101"
              Tag: ${{ parameters.Tag }}
              ExcludeGlobalJson: true

          - template: ../../templates/generic-download-and-unpack-drop-from-build.yml
            parameters:
              DropName: $(dropName)
              WorkspacePath: "$(Pipeline.Workspace)"
              BuildId: "$(ReferencedBuildId)"
              BuildDefinitionId: "${{ parameters.BuildDefinitionId }}"
              StripComponents: 4

          # -----------------------------------------------------------------
          # Build Omnia - Docker image and publish to AZ Container Registry
          # -----------------------------------------------------------------
          - template: ../../templates/generic-extension-build-to-repository-and-cloud.yml
            parameters:
              ReleaseVersion: "$(ReleaseVersion)"
              CloudClientId: "$(TestCloudClientId)"
              CloudClientSecret: "$(TestCloudClientSecret)"
              ExtensionId: ${{ parameters.ExtensionId }}
              Intent: "prod"
              Environment: "test"
              ExtensionJsonPath: "$(Build.ArtifactStagingDirectory)/extension.json"
              CloudApiAppId: "" # Only used if environment is custom
              CloudApiUrl: "" # Only used if environment is custom
              ApiAppBase: "" # Only used if environment is custom
              CliAppId: "" # Only used if environment is custom
              ExtensionName: ${{ parameters.ExtensionName }}

# ------------------------------------------------------------------
  # STAGE: Push Omnia Extensions to TEST Cloud - Dev intent
  # ------------------------------------------------------------------
  - stage: Push_TestCloud_DevIntent
    dependsOn: [EnsureVersion, Push_TestCloud_ProdIntent]
    displayName: "Push Test Cloud (Dev intent)"
    jobs:
      - job: Push_TestCloud_DevIntentJob
        pool:
          name: ${{ parameters.PoolName }}
        variables:
          ReleaseVersion: $[ stageDependencies.EnsureVersion.EnsureVersionJob.outputs['EnsureVersionTask.ReleaseVersion'] ]
          ReferencedBuildId: $[ stageDependencies.EnsureVersion.EnsureVersionJob.outputs['EnsureVersionTask.ReferencedBuildId'] ]
        displayName: "Push Test Cloud (Dev intent)"
        steps:
          - checkout: OmniaPipelines

          - template: ../../templates/generic-rename-source-folders.yml

          # -----------------------------------------------------------------
          # init dotnet and npm, and omnia cli
          # Download and unzip drop
          # -----------------------------------------------------------------
          - template: ../../templates/generic-init-dotnet-omnia-npm.yml
            parameters:
              dotnetVersion: "9.0.101"
              Tag: ${{ parameters.Tag }}
              ExcludeGlobalJson: true

          - template: ../../templates/generic-download-and-unpack-drop-from-build.yml
            parameters:
              DropName: $(dropName)
              WorkspacePath: "$(Pipeline.Workspace)"
              BuildId: "$(ReferencedBuildId)"
              BuildDefinitionId: "${{ parameters.BuildDefinitionId }}"
              StripComponents: 4

          # -----------------------------------------------------------------
          # Build Omnia - Docker image and publish to AZ Container Registry
          # -----------------------------------------------------------------
          - template: ../../templates/generic-extension-build-to-repository-and-cloud.yml
            parameters:
              ReleaseVersion: "$(ReleaseVersion)"
              CloudClientId: "$(TestCloudClientId)"
              CloudClientSecret: "$(TestCloudClientSecret)"
              ExtensionId: ${{ parameters.ExtensionId }}
              Intent: "dev"
              Environment: "test"
              ExtensionJsonPath: "$(Build.ArtifactStagingDirectory)/extension.json"
              CloudApiAppId: "" # Only used if environment is custom
              CloudApiUrl: "" # Only used if environment is custom
              ApiAppBase: "" # Only used if environment is custom
              CliAppId: "" # Only used if environment is custom
              ExtensionName: ${{ parameters.ExtensionName }}

  # ------------------------------------------------------------------
  # STAGE: Push Omnia Extensions to PROD Cloud - Prod intent
  # ------------------------------------------------------------------
  - stage: Push_ProdCloud_ProdIntent
    dependsOn: [EnsureVersion, Push_TestCloud_ProdIntent]
    displayName: "Push Prod Cloud (Prod intent)"
    jobs:
      - job: Push_ProdCloud_ProdIntentJob
        pool:
          name: ${{ parameters.PoolName }}
        variables:
          ReleaseVersion: $[ stageDependencies.EnsureVersion.EnsureVersionJob.outputs['EnsureVersionTask.ReleaseVersion'] ]
          ReferencedBuildId: $[ stageDependencies.EnsureVersion.EnsureVersionJob.outputs['EnsureVersionTask.ReferencedBuildId'] ]
        displayName: "Push Prod Cloud (Prod intent)"
        steps:
          - checkout: OmniaPipelines

          - template: ../../templates/generic-rename-source-folders.yml

          # -----------------------------------------------------------------
          # init dotnet and npm, and omnia cli
          # Download and unzip drop
          # -----------------------------------------------------------------
          - template: ../../templates/generic-init-dotnet-omnia-npm.yml
            parameters:
              dotnetVersion: "9.0.101"
              Tag: ${{ parameters.Tag }}
              ExcludeGlobalJson: true

          - template: ../../templates/generic-download-and-unpack-drop-from-build.yml
            parameters:
              DropName: $(dropName)
              WorkspacePath: "$(Pipeline.Workspace)"
              BuildId: "$(ReferencedBuildId)"
              BuildDefinitionId: "${{ parameters.BuildDefinitionId }}"
              StripComponents: 4

          # -----------------------------------------------------------------
          # Build Omnia - Docker image and publish to AZ Container Registry
          # -----------------------------------------------------------------
          - template: ../../templates/generic-extension-build-to-repository-and-cloud.yml
            parameters:
              ReleaseVersion: "$(ReleaseVersion)"
              CloudClientId: "$(ProdCloudClientId)"
              CloudClientSecret: "$(ProdCloudClientSecret)"
              ExtensionId: ${{ parameters.ExtensionId }}
              Intent: "prod"
              Environment: "prod"
              ExtensionJsonPath: "$(Build.ArtifactStagingDirectory)/extension.json"
              CloudApiAppId: "" # Only used if environment is custom
              CloudApiUrl: "" # Only used if environment is custom
              ApiAppBase: "" # Only used if environment is custom
              CliAppId: "" # Only used if environment is custom
              ExtensionName: ${{ parameters.ExtensionName }}

  # ------------------------------------------------------------------
  # STAGE: Push Omnia Extensions to PROD Cloud - Dev intent
  # ------------------------------------------------------------------
  - stage: Push_ProdCloud_DevIntent
    dependsOn: [EnsureVersion, Push_TestCloud_ProdIntent]
    displayName: "Push Prod Cloud (Dev intent)"
    jobs:
      - job: Push_ProdCloud_DevIntentJob
        pool:
          name: ${{ parameters.PoolName }}
        variables:
          ReleaseVersion: $[ stageDependencies.EnsureVersion.EnsureVersionJob.outputs['EnsureVersionTask.ReleaseVersion'] ]
          ReferencedBuildId: $[ stageDependencies.EnsureVersion.EnsureVersionJob.outputs['EnsureVersionTask.ReferencedBuildId'] ]
        displayName: "Push Prod Cloud (Dev intent)"
        steps:
          - checkout: OmniaPipelines

          - template: ../../templates/generic-rename-source-folders.yml

          # -----------------------------------------------------------------
          # init dotnet and npm, and omnia cli
          # Download and unzip drop
          # -----------------------------------------------------------------
          - template: ../../templates/generic-init-dotnet-omnia-npm.yml
            parameters:
              dotnetVersion: "9.0.101"
              Tag: ${{ parameters.Tag }}
              ExcludeGlobalJson: true

          - template: ../../templates/generic-download-and-unpack-drop-from-build.yml
            parameters:
              DropName: $(dropName)
              WorkspacePath: "$(Pipeline.Workspace)"
              BuildId: "$(ReferencedBuildId)"
              BuildDefinitionId: "${{ parameters.BuildDefinitionId }}"
              StripComponents: 4

          # -----------------------------------------------------------------
          # Build Omnia - Docker image and publish to AZ Container Registry
          # -----------------------------------------------------------------
          - template: ../../templates/generic-extension-build-to-repository-and-cloud.yml
            parameters:
              ReleaseVersion: "$(ReleaseVersion)"
              CloudClientId: "$(ProdCloudClientId)"
              CloudClientSecret: "$(ProdCloudClientSecret)"
              ExtensionId: ${{ parameters.ExtensionId }}
              Intent: "dev"
              Environment: "prod"
              ExtensionJsonPath: "$(Build.ArtifactStagingDirectory)/extension.json"
              CloudApiAppId: "" # Only used if environment is custom
              CloudApiUrl: "" # Only used if environment is custom
              ApiAppBase: "" # Only used if environment is custom
              CliAppId: "" # Only used if environment is custom
              ExtensionName: ${{ parameters.ExtensionName }}

  # ------------------------------------------------------------------
  # STAGE: Start Other Clouds - trigger pipelines
  # ------------------------------------------------------------------
  - stage: StartOtherClouds
    dependsOn: [EnsureVersion, Push_ProdCloud_ProdIntent]
    displayName: "Start Other Clouds"
    jobs:
      - job: StartOtherCloudsJob
        pool:
          name: ${{ parameters.PoolName }}
        variables:
          ReleaseVersion: $[ stageDependencies.EnsureVersion.EnsureVersionJob.outputs['EnsureVersionTask.ReleaseVersion'] ]
          UsedBuildVersion: $[ stageDependencies.EnsureVersion.EnsureVersionJob.outputs['EnsureVersionTask.UsedBuildVersion'] ]
        steps:
          - checkout: OmniaPipelines
          - template: ../../templates/generic-trigger-extension-release-definition.yml
            parameters:
              DefinitionId: "${{ parameters.AutostartDefinitionId }}"
              ReleaseVersion: "$(ReleaseVersion)"
              PoolName: "${{ parameters.PoolName }}"
              PipelineName: ${{ parameters.ExtensionName }}

  # -----------------------------------------------------------------
  # STAGE: Set next build version
  # -----------------------------------------------------------------
  - stage: SetNextBuildVersion
    dependsOn: [EnsureVersion]
    displayName: "Set Next Build Version"
    jobs:
      - job: SetNextBuildVersionJob
        pool:
          name: ${{ parameters.PoolName }}
        variables:
          UsedBuildVersion: $[ stageDependencies.EnsureVersion.EnsureVersionJob.outputs['EnsureVersionTask.UsedBuildVersion'] ]
        steps:
          - checkout: OmniaPipelines
          - template: ../../templates/generic-update-library-counter.yml
            parameters:
              LibraryGroupId: "${{ parameters.LibraryGroupId }}"
              VariableName: "${{ parameters.VariableName }}"
              CurrentBuildVersionValue: "$(UsedBuildVersion)"
