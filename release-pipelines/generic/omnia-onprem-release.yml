parameters:
  - name: BuildConfiguration
    type: string
    default: "release"
    values:
      - "release"
      - "debug"

  - name: "PoolName"
    type: string
    default: "Azure Pipelines"
    values:
      - "Azure Pipelines"
      - "Omnia Agents"

# --------------------------------------------------
# EnsureVersion -> Build_Deployment_Package
#               -> Push_Npm_Nuget             
#               -> SetNextBuildVersion
# --------------------------------------------------
stages:
  - stage: EnsureVersion
    dependsOn: []
    displayName: "Ensure Version"
    jobs:
      - job: EnsureVersionJob
        pool:
          name: ${{ parameters.PoolName }}
        steps:
          - checkout: OmniaPipelines

          - script: |
              set -euo pipefail 

              missing_params=()
              if [ -z "$(OmniaMainVersion)" ]; then
                missing_params+=("OmniaMainVersion")
              fi
              if [ -z "$(OmniaDefinitionId)" ]; then
                missing_params+=("OmniaDefinitionId")
              fi
              if [ -z "$(PackageTag)" ]; then
                missing_params+=("PackageTag")
              fi
              if([ -z "$(LibraryGroupId)" ]); then
                missing_params+=("LibraryGroupId")
              fi

              if [ ${#missing_params[@]} -ne 0 ]; then
                echo "##vso[task.logissue type=error]Missing or empty parameters: ${missing_params[*]}"
                exit 1
              fi

              # if [ "$(resources.pipeline.OmniaMainBuild.result)" != "succeeded" ]; then
              #   echo "‚ùå The referenced build did not succeed. Failing the pipeline."
              #   exit 1
              # fi
            displayName: "Validate parameters"

          # outputs: BuildVersionNumberToUse (internal)
          - template: ../../templates/generic-get-build-version-number-to-use.yml
            parameters:
              NextBuildVersion: $(OmniaNextBuildVersion)

          # outputs: ReleaseVersion (internal)
          - template: ../../templates/generic-ensure-version-as-variable.yml
            parameters:
              BuildVersionNumber: $(BuildVersionNumberToUse)
              Tag: $(PackageTag)
              MainVersion: $(OmniaMainVersion)

          - template: ../../templates/generic-set-build-version-number-on-build.yml
            parameters:
              ReleaseVersion: "$(ReleaseVersion)"

          # outputs: ReleaseVersion, UsedBuildVersion 
          - script: |
              echo "Setting version: $(ReleaseVersion)"
              echo "##vso[build.addbuildtag]$(ReleaseVersion)"
              echo "##vso[task.setvariable variable=UsedBuildVersion;isOutput=true]$(BuildVersionNumberToUse)"
              echo "##vso[task.setvariable variable=ReleaseVersion;isOutput=true]$(ReleaseVersion)"
            name: EnsureVersionTask
            displayName: "Setting version variable and tag"


  # -----------------------------------------------------------------
  # STAGE: Set next build version
  # -----------------------------------------------------------------
  - stage: SetNextBuildVersion
    dependsOn: [EnsureVersion]
    displayName: "Set Next Build Version"
    jobs:
      - job: SetNextBuildVersionJob
        pool:
          name: ${{ parameters.PoolName }}
        variables:
          UsedBuildVersion: $[ stageDependencies.EnsureVersion.EnsureVersionJob.outputs['EnsureVersionTask.UsedBuildVersion'] ]
        steps:
          - checkout: OmniaPipelines

          - template: ../../templates/generic-update-library-counter.yml
            parameters:
              LibraryGroupId: "$(LibraryGroupId)"
              VariableName: "OmniaNextBuildVersion"
              CurrentBuildVersionValue: $(UsedBuildVersion)
