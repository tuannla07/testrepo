parameters:
  - name: "PoolName"
    type: string
    default: "Azure Pipelines"
    values:
      - "Azure Pipelines"
      - "Omnia Agents"

  - name: ReleaseVersion
    type: string

  - name: ReleaseDefinitionId
    type: string
    default: ""

  - name: BuildDefinitionId
    type: string
    default: ""

  # EnsureVersion -> Push_ProdCloud_ProdIntent  -> Push_MigrationProdCloud_ProdIntent
stages:
  - stage: EnsureVersion
    dependsOn: []
    displayName: "Ensure Version"
    jobs:
      - job: EnsureVersionJob
        pool:
          name: ${{ parameters.PoolName }}
        steps:
          - checkout: OmniaPipelines

          - script: |
              set -euo pipefail
        
              missing_params=()
              if [ -z "${{ parameters.ReleaseVersion }}" ]; then
                missing_params+=("ReleaseVersion")
              fi
              if [ -z "${{ parameters.ReleaseDefinitionId }}" ]; then
                missing_params+=("ReleaseDefinitionId")
              fi
              if [ -z "${{ parameters.BuildDefinitionId }}" ]; then
                missing_params+=("BuildDefinitionId")
              fi
              if [ -z "$(PackageTag)" ]; then
                missing_params+=("PackageTag")
              fi
              if([ -z "$(apiappbase)" ]); then
                missing_params+=("ApiAppBase")
              fi
              if([ -z "$(cloudapiappid)" ]); then
                missing_params+=("CloudApiAppId")
              fi
              if([ -z "$(cloudapiurl)" ]); then
                missing_params+=("CloudApiUrl")
              fi
              if([ -z "$(cliappid)" ]); then
                missing_params+=("CliAppId")
              fi
              if([ -z "$(ProdCloudClientId)" ]); then
                missing_params+=("ProdCloudClientId")
              fi
              if [ ${#missing_params[@]} -ne 0 ]; then
                echo "##vso[task.logissue type=error]Missing or empty parameters: ${missing_params[*]}"
                exit 1
              fi

              echo "All parameters are set."
              echo "---------------------------------------------"
              echo "- ReleaseVersion: ${{ parameters.ReleaseVersion }}"
              echo "- PackageTag: $(PackageTag)"
              echo "- ReleaseDefinitionId: ${{ parameters.ReleaseDefinitionId }}"
              echo "- BuildDefinitionId: ${{ parameters.BuildDefinitionId }}"
              echo "---------------------------------------------"
              echo "- ApiAppBase: $(apiappbase)"
              echo "- CloudApiAppId: $(cloudapiappid)"
              echo "- CloudApiUrl: $(cloudapiurl)"
              echo "- CliAppId: $(cliappid)"
              echo "- CloudClientId: $(ProdCloudClientId)"
              echo "---------------------------------------------"


            displayName: "Validate parameters"

          # outputs: BuildVersionNumberToUse (internal)
          - template: ../../templates/generic-set-build-version-number-on-build.yml
            parameters:
              ReleaseVersion: "${{ parameters.ReleaseVersion }}"

          - script: |
              echo "Setting version: ${{ parameters.ReleaseVersion }}"
              echo "##vso[build.addbuildtag]${{ parameters.ReleaseVersion }}"
            name: EnsureVersionTask
            displayName: "Setting build tag"

  # ------------------------------------------------------------------
  # STAGE: Push Omnia Extensions to PROD Cloud - Prod intent
  # ------------------------------------------------------------------
  - stage: Push_ProdCloud_ProdIntent
    dependsOn: [EnsureVersion]
    displayName: "Push Prod Cloud (Prod intent)"
    jobs:
      - job: Push_ProdCloud_ProdIntentJob
        pool:
          name: ${{ parameters.PoolName }}
        variables:
          Version: $[ stageDependencies.EnsureVersion.EnsureVersionJob.outputs['EnsureVersionTask.Version'] ]
        displayName: "Push Prod Cloud (Prod intent)"
        steps:
          - checkout: OmniaPipelines

          - template: ../../templates/generic-rename-source-folders.yml

          - template: ../../templates/omnia-build-push-extension-to-cloud-from-version.yml
            parameters:
              Tag: $(PackageTag)
              ReleaseVersion: "${{ parameters.ReleaseVersion }}"
              ReleaseDefinitionId: "${{ parameters.ReleaseDefinitionId }}"
              BuildDefinitionId: ${{ parameters.BuildDefinitionId }}
              DropName: $(dropName)
              CloudClientId: "$(ProdCloudClientId)"
              CloudClientSecret: "$(ProdCloudClientSecret)"
              ApiAppBase: "$(apiappbase)"
              CloudApiAppId: "$(cloudapiappid)"
              CloudApiUrl: "$(cloudapiurl)"
              CliAppId: "$(cliappid)"
              Intent: "prod"
              Environment: "prod"

  # ------------------------------------------------------------------
  # STAGE: Push Migration Workers to PROD Cloud - Prod intent
  # ------------------------------------------------------------------
  - stage: Push_MigrationProdCloud_ProdIntent
    dependsOn: [EnsureVersion, Push_ProdCloud_ProdIntent]
    displayName: "Push Migration Workers Prod Cloud (Prod intent)"
    jobs:
      - job: Push_MigrationProdCloud_ProdIntentJob
        pool:
          name: ${{ parameters.PoolName }}
        variables:
          Version: $[ stageDependencies.EnsureVersion.EnsureVersionJob.outputs['EnsureVersionTask.Version'] ]
        displayName: "Push Migration Workers Prod Cloud (Prod intent)"
        steps:
          - checkout: OmniaPipelines

          - template: ../../templates/generic-rename-source-folders.yml

          - template: ../../templates/omnia-build-push-migration-extension-to-cloud-from-version.yml
            parameters:
              Tag: $(PackageTag)
              ReleaseVersion: "${{ parameters.ReleaseVersion }}"
              ReleaseDefinitionId: "${{ parameters.ReleaseDefinitionId }}"
              BuildDefinitionId: "${{ parameters.BuildDefinitionId }}"
              DropName: $(dropName)
              CloudClientId: "$(ProdCloudClientId)"
              CloudClientSecret: "$(ProdCloudClientSecret)"
              ApiAppBase: "$(apiappbase)"
              CloudApiAppId: "$(cloudapiappid)"
              CloudApiUrl: "$(cloudapiurl)"
              CliAppId: "$(cliappid)"
              Intent: "prod"
              Environment: "prod"
