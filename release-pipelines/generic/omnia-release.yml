parameters:
  - name: BuildConfiguration
    type: string
    default: "release"
    values:
      - "release"
      - "debug"

  - name: "PoolName"
    type: string
    default: "Azure Pipelines"
    values:
      - "Azure Pipelines"
      - "Omnia Agents"

# --------------------------------------------------
# EnsureVersion -> Push_TestCloud_ProdIntent  -> Push_MigrationTestCloud_ProdIntent   -> StartOtherClouds
#                                             -> Push_TestCloud_DevIntent
#                                             -> Push_MigrationTestCloud_DevIntent
#               -> Push_ProdCloud_ProdIntent  -> Push_MigrationProdCloud_ProdIntent   -> StartOtherClouds
#                                             -> Push_ProdCloud_DevIntent
#                                             -> Push_MigrationProdCloud_DevIntent
#               -> Push_Npm_Nuget             
#               -> SetNextBuildVersion
# --------------------------------------------------
stages:
  - stage: EnsureVersion
    dependsOn: []
    displayName: "Ensure Version"
    jobs:
      - job: EnsureVersionJob
        pool:
          name: ${{ parameters.PoolName }}
        steps:
          - checkout: OmniaPipelines

          - script: |
              set -euo pipefail 

              missing_params=()
              if [ -z "$(OmniaMainVersion)" ]; then
                missing_params+=("OmniaMainVersion")
              fi
              if [ -z "$(OmniaDefinitionId)" ]; then
                missing_params+=("OmniaDefinitionId")
              fi
              if [ -z "$(PackageTag)" ]; then
                missing_params+=("PackageTag")
              fi
              if([ -z "$(LibraryGroupId)" ]); then
                missing_params+=("LibraryGroupId")
              fi

              if [ ${#missing_params[@]} -ne 0 ]; then
                echo "##vso[task.logissue type=error]Missing or empty parameters: ${missing_params[*]}"
                exit 1
              fi

              # if [ "$(resources.pipeline.OmniaMainBuild.result)" != "succeeded" ]; then
              #   echo "‚ùå The referenced build did not succeed. Failing the pipeline."
              #   exit 1
              # fi
            displayName: "Validate parameters"

          # outputs: BuildVersionNumberToUse (internal)
          - template: ../../templates/generic-get-build-version-number-to-use.yml
            parameters:
              NextBuildVersion: $(OmniaNextBuildVersion)

          # outputs: ReleaseVersion (internal)
          - template: ../../templates/generic-ensure-version-as-variable.yml
            parameters:
              BuildVersionNumber: $(BuildVersionNumberToUse)
              Tag: $(PackageTag)
              MainVersion: $(OmniaMainVersion)

          - template: ../../templates/generic-set-build-version-number-on-build.yml
            parameters:
              ReleaseVersion: "$(ReleaseVersion)"

          # outputs: ReleaseVersion, UsedBuildVersion 
          - script: |
              echo "Setting version: $(ReleaseVersion)"
              echo "##vso[build.addbuildtag]$(ReleaseVersion)"
              echo "##vso[task.setvariable variable=UsedBuildVersion;isOutput=true]$(BuildVersionNumberToUse)"
              echo "##vso[task.setvariable variable=ReleaseVersion;isOutput=true]$(ReleaseVersion)"
            name: EnsureVersionTask
            displayName: "Setting version variable and tag"

  # ------------------------------------------------------------------
  # STAGE: Push Omnia Extensions to TEST Cloud - Prod intent
  # ------------------------------------------------------------------
  - stage: Push_TestCloud_ProdIntent
    dependsOn: [EnsureVersion]
    displayName: "Push Test Cloud (Prod intent)"
    jobs:
      - job: Push_TestCloud_ProdIntentJob
        pool:
          name: ${{ parameters.PoolName }}
        variables:
          ReleaseVersion: $[ stageDependencies.EnsureVersion.EnsureVersionJob.outputs['EnsureVersionTask.ReleaseVersion'] ]
        displayName: "Push Test Cloud (Prod intent)"
        steps:
          - checkout: OmniaPipelines

          - template: ../../templates/generic-rename-source-folders.yml

          - template: ../../templates/omnia-build-push-extension-to-cloud.yml
            parameters:
              Tag: $(PackageTag)
              ReleaseVersion: "$(ReleaseVersion)"
              DropName: $(dropName)
              CloudClientId: "$(TestCloudClientId)"
              CloudClientSecret: "$(TestCloudClientSecret)"
              Intent: "prod"
              Environment: "test"

  # ------------------------------------------------------------------
  # STAGE: Push Migration Workers to TEST Cloud - Prod intent
  # ------------------------------------------------------------------
  - stage: Push_MigrationTestCloud_ProdIntent
    dependsOn: [EnsureVersion, Push_TestCloud_ProdIntent]
    displayName: "Push Migration Workers Test Cloud (Prod intent)"
    jobs:
      - job: Push_MigrationTestCloud_ProdIntentJob
        pool:
          name: ${{ parameters.PoolName }}
        variables:
          ReleaseVersion: $[ stageDependencies.EnsureVersion.EnsureVersionJob.outputs['EnsureVersionTask.ReleaseVersion'] ]
        displayName: "Push Migration Workers Test Cloud (Prod intent)"
        steps:
          - checkout: OmniaPipelines

          - template: ../../templates/generic-rename-source-folders.yml

          - template: ../../templates/omnia-build-push-migration-extension-to-cloud.yml
            parameters:
              Tag: $(PackageTag)
              ReleaseVersion: "$(ReleaseVersion)"
              DropName: $(dropName)
              CloudClientId: "$(TestCloudClientId)"
              CloudClientSecret: "$(TestCloudClientSecret)"
              Intent: "prod"
              Environment: "test"

  # ------------------------------------------------------------------
  # STAGE: Push Omnia Extensions to TEST Cloud - Dev intent
  # ------------------------------------------------------------------
  - stage: Push_TestCloud_DevIntent
    dependsOn: [EnsureVersion, Push_TestCloud_ProdIntent]
    displayName: "Push Test Cloud (Dev intent)"
    jobs:
      - job: Push_TestCloud_DevIntentJob
        pool:
          name: ${{ parameters.PoolName }}
        variables:
          ReleaseVersion: $[ stageDependencies.EnsureVersion.EnsureVersionJob.outputs['EnsureVersionTask.ReleaseVersion'] ]
        displayName: "Push Test Cloud (Dev intent)"
        steps:
          - checkout: OmniaPipelines

          - template: ../../templates/generic-rename-source-folders.yml

          - template: ../../templates/omnia-build-push-extension-to-cloud.yml
            parameters:
              Tag: $(PackageTag)
              ReleaseVersion: "$(ReleaseVersion)"
              DropName: $(dropName)
              CloudClientId: "$(TestCloudClientId)"
              CloudClientSecret: "$(TestCloudClientSecret)"
              Intent: "dev"
              Environment: "test"

  # ------------------------------------------------------------------
  # STAGE: Push Migration Workers to TEST Cloud - Dev intent
  # ------------------------------------------------------------------
  - stage: Push_MigrationTestCloud_DevIntent
    dependsOn: [EnsureVersion, Push_TestCloud_ProdIntent]
    displayName: "Push Migration Workers Test Cloud (Dev intent)"
    jobs:
      - job: Push_MigrationTestCloud_DevIntentJob
        pool:
          name: ${{ parameters.PoolName }}
        variables:
          ReleaseVersion: $[ stageDependencies.EnsureVersion.EnsureVersionJob.outputs['EnsureVersionTask.ReleaseVersion'] ]
        displayName: "Push Migration Workers Test Cloud (Dev intent)"
        steps:
          - checkout: OmniaPipelines

          - template: ../../templates/generic-rename-source-folders.yml

          - template: ../../templates/omnia-build-push-migration-extension-to-cloud.yml
            parameters:
              Tag: $(PackageTag)
              ReleaseVersion: "$(ReleaseVersion)"
              DropName: $(dropName)
              CloudClientId: "$(TestCloudClientId)"
              CloudClientSecret: "$(TestCloudClientSecret)"
              Intent: "dev"
              Environment: "test"

  # ------------------------------------------------------------------
  # STAGE: Push Omnia Extensions to PROD Cloud - Prod intent
  # ------------------------------------------------------------------
  - stage: Push_ProdCloud_ProdIntent
    dependsOn: [EnsureVersion]
    displayName: "Push Prod Cloud (Prod intent)"
    jobs:
      - job: Push_ProdCloud_ProdIntentJob
        pool:
          name: ${{ parameters.PoolName }}
        variables:
          ReleaseVersion: $[ stageDependencies.EnsureVersion.EnsureVersionJob.outputs['EnsureVersionTask.ReleaseVersion'] ]
        displayName: "Push Prod Cloud (Prod intent)"
        steps:
          - checkout: OmniaPipelines

          - template: ../../templates/generic-rename-source-folders.yml

          - template: ../../templates/omnia-build-push-extension-to-cloud.yml
            parameters:
              Tag: $(PackageTag)
              ReleaseVersion: "$(ReleaseVersion)"
              DropName: $(dropName)
              CloudClientId: "$(ProdCloudClientId)"
              CloudClientSecret: "$(ProdCloudClientSecret)"
              Intent: "prod"
              Environment: "prod"

  # ------------------------------------------------------------------
  # STAGE: Push Migration Workers to PROD Cloud - Prod intent
  # ------------------------------------------------------------------
  - stage: Push_MigrationProdCloud_ProdIntent
    dependsOn: [EnsureVersion, Push_ProdCloud_ProdIntent]
    displayName: "Push Migration Workers Prod Cloud (Prod intent)"
    jobs:
      - job: Push_MigrationProdCloud_ProdIntentJob
        pool:
          name: ${{ parameters.PoolName }}
        variables:
          ReleaseVersion: $[ stageDependencies.EnsureVersion.EnsureVersionJob.outputs['EnsureVersionTask.ReleaseVersion'] ]
        displayName: "Push Migration Workers Prod Cloud (Prod intent)"
        steps:
          - checkout: OmniaPipelines

          - template: ../../templates/generic-rename-source-folders.yml

          - template: ../../templates/omnia-build-push-migration-extension-to-cloud.yml
            parameters:
              Tag: $(PackageTag)
              ReleaseVersion: "$(ReleaseVersion)"
              DropName: $(dropName)
              CloudClientId: "$(ProdCloudClientId)"
              CloudClientSecret: "$(ProdCloudClientSecret)"
              Intent: "prod"
              Environment: "prod"

  # ------------------------------------------------------------------
  # STAGE: Push Omnia Extensions to PROD Cloud - Dev intent
  # ------------------------------------------------------------------
  - stage: Push_ProdCloud_DevIntent
    dependsOn: [EnsureVersion, Push_ProdCloud_ProdIntent]
    displayName: "Push Prod Cloud (Dev intent)"
    jobs:
      - job: Push_ProdCloud_DevIntentJob
        pool:
          name: ${{ parameters.PoolName }}
        variables:
          ReleaseVersion: $[ stageDependencies.EnsureVersion.EnsureVersionJob.outputs['EnsureVersionTask.ReleaseVersion'] ]
        displayName: "Push Prod Cloud (Dev intent)"
        steps:
          - checkout: OmniaPipelines

          - template: ../../templates/generic-rename-source-folders.yml

          - template: ../../templates/omnia-build-push-extension-to-cloud.yml
            parameters:
              Tag: $(PackageTag)
              ReleaseVersion: "$(ReleaseVersion)"
              DropName: $(dropName)
              CloudClientId: "$(ProdCloudClientId)"
              CloudClientSecret: "$(ProdCloudClientSecret)"
              Intent: "dev"
              Environment: "prod"

  # ------------------------------------------------------------------
  # STAGE: Push Migration Workers to PROD Cloud - Dev intent
  # ------------------------------------------------------------------
  - stage: Push_MigrationProdCloud_DevIntent
    dependsOn: [EnsureVersion, Push_ProdCloud_ProdIntent]
    displayName: "Push Migration Workers Prod Cloud (Dev intent)"
    jobs:
      - job: Push_MigrationProdCloud_DevIntentJob
        pool:
          name: ${{ parameters.PoolName }}
        variables:
          ReleaseVersion: $[ stageDependencies.EnsureVersion.EnsureVersionJob.outputs['EnsureVersionTask.ReleaseVersion'] ]
        displayName: "Push Migration Workers Prod Cloud (Dev intent)"
        steps:
          - checkout: OmniaPipelines

          - template: ../../templates/generic-rename-source-folders.yml

          - template: ../../templates/omnia-build-push-migration-extension-to-cloud.yml
            parameters:
              Tag: $(PackageTag)
              ReleaseVersion: "$(ReleaseVersion)"
              DropName: $(dropName)
              CloudClientId: "$(ProdCloudClientId)"
              CloudClientSecret: "$(ProdCloudClientSecret)"
              Intent: "dev"
              Environment: "prod"

  # ------------------------------------------------------------------
  # STAGE: Publish NPM and Nuget packages
  # ------------------------------------------------------------------
  - stage: Push_Npm_Nuget
    displayName: "Push NPM and Nuget"
    dependsOn: [EnsureVersion]
    jobs:
      - job: Push_Npm_NugetJob
        pool:
          name: ${{ parameters.PoolName }}
        variables:
          ReleaseVersion: $[ stageDependencies.EnsureVersion.EnsureVersionJob.outputs['EnsureVersionTask.ReleaseVersion'] ]
        displayName: "Push NPM and Nuget"
        steps:
          - checkout: OmniaPipelines
          - checkout: OmniaMono

          - template: ../../templates/generic-rename-source-folders.yml
            parameters:
              RepositoryName: "OmniaMono"

          # -----------------------------------------------------------------
          # init dotnet and npm, and omnia cli
          # Download and unzip drop
          # -----------------------------------------------------------------
          - template: ../../templates/generic-init-dotnet-omnia-npm.yml
            parameters:
              dotnetVersion: "9.0.101"
              Tag: $(PackageTag)

          - template: ../../templates/generic-download-and-unpack-drop.yml
            parameters:
              DropName: $(dropName)
              WorkspacePath: "$(Pipeline.Workspace)"
              StripComponents: 4

          # -----------------------------------------------------------------
          # Build and publishNuget packages
          # -----------------------------------------------------------------
          - template: ../../templates/omnia-release-set-version-publish-all-nuget.yml
            parameters:
              ReleaseVersion: "$(ReleaseVersion)"
              Tag: $(PackageTag)
              LocalPath: "$(Build.SourcesDirectory)/omniamono"
              NugetFeed: "$(nugetFeed)"
              BuildConfiguration: "${{ parameters.BuildConfiguration }}"

          # -----------------------------------------------------------------
          # Push Nuget
          # -----------------------------------------------------------------
          - template: ../../templates/omnia-release-set-version-publish-all-npm.yml
            parameters:
              ReleaseVersion: "$(ReleaseVersion)"
              Tag: $(PackageTag)
              LocalPath: "$(Build.SourcesDirectory)/omniamono"
              ResourcePath: "$(Build.SourcesDirectory)/omniapipelines"
              NpmFeed: "$(npmFeed)"

  # ------------------------------------------------------------------
  # STAGE: Start Other Clouds - trigger pipelines
  # ------------------------------------------------------------------
  - stage: StartOtherClouds
    dependsOn:
      [
        EnsureVersion,
        Push_MigrationTestCloud_ProdIntent,
        Push_MigrationProdCloud_ProdIntent,
      ]
    displayName: "Start Other Clouds"
    jobs:
      - job: StartOtherCloudsJob
        pool:
          name: ${{ parameters.PoolName }}
        variables:
          ReleaseVersion: $[ stageDependencies.EnsureVersion.EnsureVersionJob.outputs['EnsureVersionTask.ReleaseVersion'] ]
        steps:
          - checkout: OmniaPipelines

          - template: ../../templates/generic-trigger-release-definition.yml
            parameters:
              DefinitionId: "$(OmniaAutostartDefinitionId)"
              ReleaseVersion: "$(ReleaseVersion)"
              PoolName: "${{ parameters.PoolName }}"

  # -----------------------------------------------------------------
  # STAGE: Set next build version
  # -----------------------------------------------------------------
  - stage: SetNextBuildVersion
    dependsOn: [EnsureVersion]
    displayName: "Set Next Build Version"
    jobs:
      - job: SetNextBuildVersionJob
        pool:
          name: ${{ parameters.PoolName }}
        variables:
          UsedBuildVersion: $[ stageDependencies.EnsureVersion.EnsureVersionJob.outputs['EnsureVersionTask.UsedBuildVersion'] ]
        steps:
          - checkout: OmniaPipelines

          - template: ../../templates/generic-update-library-counter.yml
            parameters:
              LibraryGroupId: "$(LibraryGroupId)"
              VariableName: "OmniaNextBuildVersion"
              CurrentBuildVersionValue: $(UsedBuildVersion)
